#!/usr/bin/perl
# A part of steam-linux-workarounds
# Copyright (C) Eskild Hustvedt 2017
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
use 5.020;
use Getopt::Long;
use File::Basename qw(basename dirname);
use JSON;
use Cwd qw(realpath);

# Purpose: Read an entire file into a scalar
sub slurp
{
    my $file = shift;
    local $/ = undef;
    open(my $i,'<',$file) or die('Failed to open '.$file.' for reading: '.$!."\n");
    my $content = <$i>;
    close($i) or warn('Failed to close filehandle for '.$file.': '.$!."\n");
    return $content;
}

# Purpose: Retrieve a list of all steam library directories
sub getSteamLibraries
{
    my @dirs = (resolveInsensitivePath($ENV{HOME}.'/.steam/steam'));
    my $configPath = resolveInsensitivePath($ENV{HOME}.'/.steam/root/config/config.vdf');
    if (!$configPath)
    {
        warn('Failed to locate the Steam config, falling back to hardcoded paths only');
        return @dirs;
    }
    my $config = slurp($configPath);
    foreach my $line (split(/\n/,$config))
    {
        if($line =~ s/\s*\"BaseInstallFolder(_\d+)?\"\s*//)
        {
            $line =~ s/^\"//;
            $line =~ s/\"$//;
            chomp($line);
            push(@dirs,$line);
        }
    }
    return @dirs;
}

# Purpose: Retrieve a list of all installed games
sub listInstalledGames
{
    my @steamPaths = getSteamLibraries();
    my %games;
    foreach my $dir (@steamPaths)
    {
        my $path = resolveInsensitivePath($dir.'/steamapps/common');
        foreach my $entry (glob($path.'/*'))
        {
            if (-d $entry)
            {
                $games{ basename($entry) } = $entry;
            }
        }
    }
    return \%games;
}

# Purpose: Load all patch metadata and return it in a hash
sub loadPatchMetadata
{
    my %patches;
    foreach my $patch (glob('./patches/*.json'))
    {
        my $fileBase = basename($patch);
        $fileBase =~ s/\.json$//;
        my $data = decode_json(slurp($patch));
        $patches{ $data->{directoryName} } = {
            meta => $data,
            basename => $fileBase,
        };
    }
    return \%patches;
}

# Purpose: Execute a single patch
sub executePatch
{
    my $patch = shift;
    my $patchRoot = shift;
    my $mode = shift;
    $mode //= 'patch';
    my $prevDir = realpath('.');
    if (-e './patches/'.$patch.'.sh')
    {
        $| = 1;
        print $mode eq 'reverse' ? 'Reversing ' : 'Applying ';
        print "patch to $patch...";
        my $patchScript = realpath('./patches/'.$patch.'.sh');
        my $shlib = realpath('./helpers/shlib.sh');
        my $action = 'performPatch';
        if ($mode eq 'reverse')
        {
            $action = 'undoPatch';
        }
        if (system('bash','-c','cd "$1" && source "$2" && source "$3" && '.$action,'patch-runner-sh',$patchRoot,$shlib,$patchScript) == 0)
        {
            print "done\n";
        }
        else
        {
            print "failed\n";
        }
    }
    else
    {
        die('Failed to locate script for '.$patch."\n");
    }
}

# Purpose: Case-insensitively resolve a path
# Usage: path = resolveInsensitivePath(path)
sub resolveInsensitivePath
{
    my $path = shift;
    my $resolved = '/';
    # Loop through each component of the path
    foreach my $component (split(/\//,$path))
    {
        # Ignore empty components (first entry, in case of multiple /-es etc.)
        next if $component eq '';
        # If resolved is not a directory any more, the path is invalid
        if (! -d $resolved)
        {
            return;
        }
        # A matched entry that is sensitive (preferred if it exists)
        my $sensitiveMatch;
        # A matched entry that is insensitive
        my $insensitiveMatch;
        # Read all entries in the directory
        opendir(my $dh,$resolved) or die('Failed to opendir '.$resolved.': '.$!."\n");
        while(readdir $dh)
        {
            # If $_ matches $component, then we use this match
            if ($_ eq $component)
            {
                $sensitiveMatch = $_;
                last;
            }
            # If a lowercased version of $_ matches a lowercased version of $component, then
            # this is a insensitive match for this part of the path
            if(lc($_) eq lc($component))
            {
                $insensitiveMatch = $_;
            }
        }
        closedir($dh) or warn('Failed to close dirhandle for '.$resolved.': '.$!."\n");
        # If we have a match, store it
        if (defined $sensitiveMatch || defined $insensitiveMatch)
        {
            # If we have a path in resolved (other than /) we need to append a / first
            if(length($resolved) > 1)
            {
                $resolved .= '/';
            }
            # Append the resolved path component
            $resolved .= ($sensitiveMatch // $insensitiveMatch);
        }
        # If we have no matches for this component then the path is invalid
        else
        {
            return;
        }
    }
    # Return the resolved path
    return $resolved;
}

# Purpose: Print formatted --help output
# Usage: printHelp('-shortoption', '--longoption', 'description');
#  Description will be reformatted to fit within a normal terminal
sub printHelp
{
    # The short option
    my $short = shift,
    # The long option
    my $long = shift;
    # The description
    my $desc = shift;
    # The generated description that will be printed in the end
    my $GeneratedDesc;
    # The current line of the description
    my $currdesc = '';
    # The maximum length any line can be
    my $maxlen = 80;
    # The length the options take up
    my $optionlen = 23;
    # Check if the short/long are LONGER than optionlen, if so, we need
    # to do some additional magic to take up only $maxlen.
    # The +1 here is because we always add a space between them, no matter what
    if ((length($short) + length($long) + 1) > $optionlen)
    {
        $optionlen = length($short) + length($long) + 1;
    }
    # Split the description into lines
    foreach my $part (split(' ',$desc))
    {
        if(defined $GeneratedDesc)
        {
            if ((length($currdesc) + length($part) + 1 + 24) > $maxlen)
            {
                $GeneratedDesc .= "\n";
                $currdesc = '';
            }
            else
            {
                $currdesc .= ' ';
                $GeneratedDesc .= ' ';
            }
        }
        $currdesc .= $part;
        $GeneratedDesc .= $part;
    }
    # Something went wrong
    pDie('Option mismatch') if not $GeneratedDesc;
    # Print it all
    foreach my $description (split(/\n/,$GeneratedDesc))
    {
        printf "%-4s %-22s %s\n", $short,$long,$description;
        # Set short and long to '' to ensure we don't print the options twice
        $short = '';$long = '';
    }
    # Succeed
    return 1;
}

# Purpose: Output usage information
sub usage
{
    say "USAGE: apply-patches OPTIONS? game1, game2 ..";
    say "";
    printHelp('','--all','Apply all patches if requested');
    printHelp('','--undo','Undo a patch instead of applying it');
    printHelp('','--help','Print this help information');
    printHelp('','--list','List all installed games that have patches');
    exit(shift);
}

# Purpose: Main entry point
sub main
{
    chdir( dirname(realpath($0)) );
    if ( ! -e './patches')
    {
        die('Failed to locate patches');
    }

    my $action = 'patch';
    my $allowAll = 0;

    Getopt::Long::Configure('no_ignore_case','bundling');
    GetOptions(
        'help' => sub {
            usage(0);
        },
        'undo' => sub {
            $action = 'reverse';
        },
        'list' => sub {
            $action = 'list';
            $allowAll = 1;
        },
        'all' => sub
        {
            $allowAll = 1;
        },
    );

    my $installedGames = listInstalledGames();
    my $patches = loadPatchMetadata();

    my @performOnGames = @ARGV;
    if (!@performOnGames || $action eq 'list')
    {
        if (!$allowAll)
        {
            usage(0);
        }
        @performOnGames = keys %{$patches};
    }

    if ($action eq 'list')
    {
        say 'Installed games with available patches:';
    }
    foreach my $patchGame (@performOnGames)
    {
        if (!$installedGames->{$patchGame})
        {
            if (!$allowAll)
            {
                say "$patchGame: does not appear to be installed";
            }
            next;
        }
        if (!$patches->{$patchGame})
        {
            say "$patchGame: has no patches";
            next;
        }
        if ($installedGames->{$patchGame})
        {
            if ($action eq 'list')
            {
                say $patchGame;
            }
            else
            {
                executePatch($patches->{$patchGame}->{basename},$installedGames->{$patchGame},$action);
            }
        }
    }
}

main();
